const { app, BrowserWindow, ipcMain, shell, Menu } = require('electron');
const path = require('path');
const Store = require('electron-store');

const store = new Store();

let mainWindow;
let tabsWindow = null;
const printerTabs = new Map();

function createMainWindow() {
  mainWindow = new BrowserWindow({
    width: 1400,
    height: 900,
    minWidth: 1200,
    minHeight: 800,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: path.join(__dirname, 'preload.js')
    },
    icon: getIconPath(),
    title: '3D Printer Control Panel v1.3.0',
    show: false
  });

  mainWindow.loadFile('index.html');

  mainWindow.once('ready-to-show', () => {
    mainWindow.show();
  });

  if (process.argv.includes('--dev')) {
    mainWindow.webContents.openDevTools();
  }

  createApplicationMenu();

  mainWindow.on('closed', () => {
    if (tabsWindow && !tabsWindow.isDestroyed()) {
      tabsWindow.close();
    }
    mainWindow = null;
  });
}

function getIconPath() {
  switch (process.platform) {
    case 'darwin':
      return path.join(__dirname, 'icons/icon.icns');
    case 'win32':
      return path.join(__dirname, 'icons/icon.ico');
    default:
      return path.join(__dirname, 'icons/icon.png');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —è–∑—ã–∫–∞
function getSavedLanguage() {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const savedLang = store.get('appLanguage', null);
  if (savedLang) {
    return savedLang;
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π
  try {
    const locale = app.getLocale();
    return locale.toLowerCase().includes('ru') ? 'ru' : 'en';
  } catch (error) {
    console.log('Could not determine locale, using English as default');
    return 'en';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞
function setLanguage(lang) {
  store.set('appLanguage', lang);
  
  // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –º–µ–Ω—é
  createApplicationMenu();
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º renderer –ø—Ä–æ—Ü–µ—Å—Å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞
  if (mainWindow && !mainWindow.isDestroyed()) {
    mainWindow.webContents.send('language-changed', lang);
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const isRussian = lang === 'ru';
  const { dialog } = require('electron');
  dialog.showMessageBox(mainWindow, {
    type: 'info',
    title: isRussian ? '–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω' : 'Language Changed',
    message: isRussian 
      ? '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑–º–µ–Ω–µ–Ω. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É.' 
      : 'Application language has been changed. Please restart the application for full effect.',
    buttons: ['OK']
  });
}

function createApplicationMenu() {
  const currentLang = getSavedLanguage();
  const isRussian = currentLang === 'ru';
  
  const template = [
    {
      label: isRussian ? '–§–∞–π–ª' : 'File',
      submenu: [
        {
          label: isRussian ? '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä' : 'Add Printer',
          accelerator: 'CmdOrCtrl+N',
          click: () => {
            if (mainWindow) {
              mainWindow.webContents.send('menu-add-printer');
            }
          }
        },
        {
          label: isRussian ? '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è' : 'Test All Connections',
          accelerator: 'CmdOrCtrl+T',
          click: () => {
            if (mainWindow) {
              mainWindow.webContents.send('menu-test-all');
            }
          }
        },
        { type: 'separator' },
        {
          label: isRussian ? '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram' : 'Telegram Settings',
          accelerator: 'CmdOrCtrl+Shift+T',
          click: () => {
            if (mainWindow) {
              mainWindow.webContents.executeJavaScript('openTelegramSettingsModal()');
            }
          }
        },
        { type: 'separator' },
        {
          label: isRussian ? '–í—ã—Ö–æ–¥' : 'Exit',
          accelerator: process.platform === 'darwin' ? 'Cmd+Q' : 'Ctrl+Q',
          click: () => {
            app.quit();
          }
        }
      ]
    },
    {
      label: isRussian ? '–í–∏–¥' : 'View',
      submenu: [
        { role: 'reload' },
        { role: 'forceReload' },
        { role: 'toggleDevTools' },
        { type: 'separator' },
        { role: 'resetZoom' },
        { role: 'zoomIn' },
        { role: 'zoomOut' },
        { type: 'separator' },
        { role: 'togglefullscreen' }
      ]
    },
    {
      label: isRussian ? '–û–∫–Ω–æ' : 'Window',
      submenu: [
        { role: 'minimize' },
        { role: 'close' }
      ]
    },
    {
      label: 'Language',
      submenu: [
        {
          label: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
          type: 'radio',
          checked: isRussian,
          click: () => {
            setLanguage('ru');
          }
        },
        {
          label: 'üá¨üáß English',
          type: 'radio',
          checked: !isRussian,
          click: () => {
            setLanguage('en');
          }
        }
      ]
    },
    {
      label: isRussian ? '–ü–æ–º–æ—â—å' : 'Help',
      submenu: [
        {
          label: isRussian ? '–ü–æ–º–æ—â—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Telegram –±–æ—Ç–∞' : 'Telegram Bot Setup Help',
          click: () => {
            showTelegramHelp(isRussian);
          }
        },
        { type: 'separator' },
        {
          label: isRussian ? '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ 3D Printer Control Panel' : 'About 3D Printer Control Panel',
          click: () => {
            shell.openExternal('https://github.com/Tombraider2006/KCP');
          }
        }
      ]
    }
  ];

  const menu = Menu.buildFromTemplate(template);
  Menu.setApplicationMenu(menu);
}

function showTelegramHelp(isRussian) {
  const helpWindow = new BrowserWindow({
    width: 700,
    height: 800,
    parent: mainWindow,
    modal: true,
    resizable: true,
    autoHideMenuBar: true,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true
    },
    title: isRussian ? '–ü–æ–º–æ—â—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Telegram –±–æ—Ç–∞' : 'Telegram Bot Setup Help'
  });

  const helpContent = isRussian ? `
    <!DOCTYPE html>
    <html>
    <head>
        <title>–ü–æ–º–æ—â—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Telegram –±–æ—Ç–∞</title>
        <style>
            body { 
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                padding: 25px; 
                line-height: 1.6;
                color: #333;
                background: #f5f5f5;
            }
            .container {
                max-width: 650px;
                margin: 0 auto;
                background: white;
                padding: 30px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }
            h1 { color: #0088cc; text-align: center; margin-bottom: 30px; }
            h2 { color: #555; margin-top: 25px; padding-bottom: 8px; border-bottom: 2px solid #0088cc; }
            .step { 
                background: #f8f9fa; 
                padding: 20px; 
                margin: 15px 0; 
                border-radius: 8px;
                border-left: 4px solid #0088cc;
            }
            code { 
                background: #2d2d2d; 
                color: #fff; 
                padding: 12px; 
                display: block; 
                border-radius: 6px;
                margin: 12px 0;
                font-family: 'Courier New', monospace;
                font-size: 14px;
                overflow-x: auto;
            }
            .note { 
                background: #e3f2fd; 
                border: 1px solid #bbdefb; 
                padding: 12px; 
                border-radius: 6px;
                margin: 15px 0;
            }
            .warning { 
                background: #fff3cd; 
                border: 1px solid #ffeaa7; 
                padding: 12px; 
                border-radius: 6px;
                margin: 15px 0;
            }
            .success { 
                background: #d4edda; 
                border: 1px solid #c3e6cb; 
                padding: 12px; 
                border-radius: 6px;
                margin: 15px 0;
            }
            ul { padding-left: 20px; }
            li { margin: 8px 0; }
            .icon { font-size: 18px; margin-right: 8px; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>ü§ñ –ü–æ–º–æ—â—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Telegram –±–æ—Ç–∞</h1>
            
            <h2>üìã –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ Telegram</h2>
            <div class="step">
                <p><span class="icon">1.</span> –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ <strong>@BotFather</strong></p>
                <p><span class="icon">2.</span> –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/newbot</code></p>
                <p><span class="icon">3.</span> –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–º—è –∏ username –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞</p>
                <p><span class="icon">4.</span> –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <strong>–¢–æ–∫–µ–Ω –±–æ—Ç–∞</strong> - —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ!</p>
                <div class="note">
                    üí° <strong>–ü—Ä–∏–º–µ—Ä —Ç–æ–∫–µ–Ω–∞:</strong> <code>1234567890:ABCdefGHIjklMNopQRstUVwxyz</code>
                </div>
            </div>

            <h2>üÜî –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ Chat ID</h2>
            <div class="step">
                <p><strong>–°–ø–æ—Å–æ–± 1 (–ø—Ä–æ—Å—Ç–æ–π):</strong></p>
                <p><span class="icon">1.</span> –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ <strong>@userinfobot</strong> –≤ Telegram</p>
                <p><span class="icon">2.</span> –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –∫–æ–º–∞–Ω–¥—É <code>/start</code></p>
                <p><span class="icon">3.</span> –û–Ω –ø–æ–∫–∞–∂–µ—Ç –≤–∞—à Chat ID - —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ</p>
                
                <p><strong>–°–ø–æ—Å–æ–± 2 (—á–µ—Ä–µ–∑ API):</strong></p>
                <p><span class="icon">1.</span> –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –≤–∞—à–∏–º –Ω–æ–≤—ã–º –±–æ—Ç–æ–º</p>
                <p><span class="icon">2.</span> –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/start</code></p>
                <p><span class="icon">3.</span> –û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–æ—Ç URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ (–∑–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN):</p>
                <code>https://api.telegram.org/botYOUR_BOT_TOKEN/getUpdates</code>
                <p><span class="icon">4.</span> –ù–∞–π–¥–∏—Ç–µ –æ–±—ä–µ–∫—Ç "chat" –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ "id"</p>
            </div>

            <h2>‚öôÔ∏è –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ</h2>
            <div class="step">
                <p><span class="icon">1.</span> –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "ü§ñ Telegram" –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ</p>
                <p><span class="icon">2.</span> –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ Chat ID</p>
                <p><span class="icon">3.</span> –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å</p>
                <p><span class="icon">4.</span> –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</p>
                <p><span class="icon">5.</span> –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</p>
                <div class="success">
                    ‚úÖ <strong>–ì–æ—Ç–æ–≤–æ!</strong> –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –≤–∞—à–∏—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
                </div>
            </div>

            <h2>üîî –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h2>
            
            <h3>üìÑ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—á–∞—Ç–∏:</h3>
            <ul>
                <li>‚úÖ <strong>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—á–∞—Ç–∏</strong> - –∫–æ–≥–¥–∞ –ø–µ—á–∞—Ç—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</li>
                <li>‚ùå <strong>–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏</strong> - –∫–æ–≥–¥–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—á–∞—Ç–∏</li>
                <li>‚è∏Ô∏è <strong>–ü–∞—É–∑–∞ –ø–µ—á–∞—Ç–∏</strong> - –∫–æ–≥–¥–∞ –ø–µ—á–∞—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É</li>
            </ul>
            
            <h3>üñ®Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ:</h3>
            <ul>
                <li>üîå <strong>–ü—Ä–∏–Ω—Ç–µ—Ä offline</strong> - –∫–æ–≥–¥–∞ –ø—Ä–∏–Ω—Ç–µ—Ä –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</li>
                <li>üü¢ <strong>–ü—Ä–∏–Ω—Ç–µ—Ä online</strong> - –∫–æ–≥–¥–∞ –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</li>
            </ul>
            
            <h3>üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</h3>
            <ul>
                <li>‚ö†Ô∏è <strong>–°–æ–±—ã—Ç–∏–µ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</strong> - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç:
                    <ul>
                        <li><strong>Gap</strong> (–ø–µ—Ä–µ—Ä—ã–≤ –º–µ–∂–¥—É –ø–µ—á–∞—Ç—è–º–∏ –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç)</li>
                        <li><strong>Pause</strong> (–ø–∞—É–∑–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—á–∞—Ç–∏ –±–æ–ª–µ–µ 7 –º–∏–Ω—É—Ç)</li>
                    </ul>
                </li>
                <li>üìù <strong>–û—Ç—á–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</strong> - –∫–æ–≥–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–∏—á–∏–Ω—É –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</li>
            </ul>
            
            <h3>‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</h3>
            <ul>
                <li>üöÄ <strong>–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã</strong> - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã (–≤–∫–ª—é—á–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤)</li>
            </ul>

            <div class="warning">
                <strong>–í–∞–∂–Ω–æ:</strong> –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (Privacy mode), 
                –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç –Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –≠—Ç–æ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ @BotFather –∫–æ–º–∞–Ω–¥–æ–π <code>/setprivacy</code> ‚Üí <code>Disable</code>.
            </div>

            <div class="note">
                <strong>–°–æ–≤–µ—Ç:</strong> –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, 
                –∞ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ.
            </div>
        </div>
    </body>
    </html>
  ` : `
    <!DOCTYPE html>
    <html>
    <head>
        <title>Telegram Bot Setup Help</title>
        <style>
            body { 
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                padding: 25px; 
                line-height: 1.6;
                color: #333;
                background: #f5f5f5;
            }
            .container {
                max-width: 650px;
                margin: 0 auto;
                background: white;
                padding: 30px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }
            h1 { color: #0088cc; text-align: center; margin-bottom: 30px; }
            h2 { color: #555; margin-top: 25px; padding-bottom: 8px; border-bottom: 2px solid #0088cc; }
            .step { 
                background: #f8f9fa; 
                padding: 20px; 
                margin: 15px 0; 
                border-radius: 8px;
                border-left: 4px solid #0088cc;
            }
            code { 
                background: #2d2d2d; 
                color: #fff; 
                padding: 12px; 
                display: block; 
                border-radius: 6px;
                margin: 12px 0;
                font-family: 'Courier New', monospace;
                font-size: 14px;
                overflow-x: auto;
            }
            .note { 
                background: #e3f2fd; 
                border: 1px solid #bbdefb; 
                padding: 12px; 
                border-radius: 6px;
                margin: 15px 0;
            }
            .warning { 
                background: #fff3cd; 
                border: 1px solid #ffeaa7; 
                padding: 12px; 
                border-radius: 6px;
                margin: 15px 0;
            }
            .success { 
                background: #d4edda; 
                border: 1px solid #c3e6cb; 
                padding: 12px; 
                border-radius: 6px;
                margin: 15px 0;
            }
            ul { padding-left: 20px; }
            li { margin: 8px 0; }
            .icon { font-size: 18px; margin-right: 8px; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>ü§ñ Telegram Bot Setup Help</h1>
            
            <h2>üìã Step 1: Create a Telegram Bot</h2>
            <div class="step">
                <p><span class="icon">1.</span> Open Telegram and search for <strong>@BotFather</strong></p>
                <p><span class="icon">2.</span> Send the command: <code>/newbot</code></p>
                <p><span class="icon">3.</span> Follow the instructions to choose a name and username for your bot</p>
                <p><span class="icon">4.</span> After creation, you'll receive a <strong>Bot Token</strong> - save it!</p>
                <div class="note">
                    üí° <strong>Token example:</strong> <code>1234567890:ABCdefGHIjklMNopQRstUVwxyz</code>
                </div>
            </div>

            <h2>üÜî Step 2: Get Your Chat ID</h2>
            <div class="step">
                <p><strong>Method 1 (easy):</strong></p>
                <p><span class="icon">1.</span> Search for <strong>@userinfobot</strong> in Telegram</p>
                <p><span class="icon">2.</span> Send it the <code>/start</code> command</p>
                <p><span class="icon">3.</span> It will show your Chat ID - copy it</p>
                
                <p><strong>Method 2 (via API):</strong></p>
                <p><span class="icon">1.</span> Start a conversation with your new bot</p>
                <p><span class="icon">2.</span> Send the command: <code>/start</code></p>
                <p><span class="icon">3.</span> Open this URL in your browser (replace YOUR_BOT_TOKEN):</p>
                <code>https://api.telegram.org/botYOUR_BOT_TOKEN/getUpdates</code>
                <p><span class="icon">4.</span> Look for the "chat" object and copy the "id" value</p>
            </div>

            <h2>‚öôÔ∏è Step 3: Configure in the App</h2>
            <div class="step">
                <p><span class="icon">1.</span> Click the "ü§ñ Telegram" button in the main window</p>
                <p><span class="icon">2.</span> Enter your Bot Token and Chat ID</p>
                <p><span class="icon">3.</span> Choose which notifications you want to receive</p>
                <p><span class="icon">4.</span> Click "Test Connection" to verify everything works</p>
                <p><span class="icon">5.</span> Save the settings</p>
                <div class="success">
                    ‚úÖ <strong>Done!</strong> You will now receive notifications about your printers status
                </div>
            </div>

            <h2>üîî Supported Notifications</h2>
            
            <h3>üìÑ Print Notifications:</h3>
            <ul>
                <li>‚úÖ <strong>Print Complete</strong> - When a print job finishes successfully</li>
                <li>‚ùå <strong>Print Error</strong> - When an error occurs during printing</li>
                <li>‚è∏Ô∏è <strong>Print Paused</strong> - When a print is paused</li>
            </ul>
            
            <h3>üñ®Ô∏è Printer Notifications:</h3>
            <ul>
                <li>üîå <strong>Printer Offline</strong> - When a printer goes offline (optional)</li>
                <li>üü¢ <strong>Printer Online</strong> - When a printer comes back online (optional)</li>
            </ul>
            
            <h3>üìä Efficiency Notifications:</h3>
            <ul>
                <li>‚ö†Ô∏è <strong>Inefficiency Event</strong> - Automatically detects:
                    <ul>
                        <li><strong>Gap</strong> (break between prints exceeding 10 minutes)</li>
                        <li><strong>Pause</strong> (pause during printing exceeding 7 minutes)</li>
                    </ul>
                </li>
                <li>üìù <strong>Operator Report</strong> - When operator saves the reason for inefficiency in Analytics section</li>
            </ul>
            
            <h3>‚öôÔ∏è System Notifications:</h3>
            <ul>
                <li>üöÄ <strong>Program Start</strong> - Sent when the program starts (includes version and number of printers)</li>
            </ul>

            <div class="warning">
                <strong>Important:</strong> Make sure your bot has privacy mode disabled if you want to receive messages from it.
                You can configure this via @BotFather with command <code>/setprivacy</code> ‚Üí <code>Disable</code>.
            </div>

            <div class="note">
                <strong>Tip:</strong> For testing, you can temporarily enable all notification types, 
                and after setup leave only the ones you need.
            </div>
        </div>
    </body>
    </html>
  `;

  helpWindow.loadURL(`data:text/html;charset=utf-8,${encodeURIComponent(helpContent)}`);
}

function createTabsWindow() {
  if (tabsWindow && !tabsWindow.isDestroyed()) {
    tabsWindow.focus();
    return tabsWindow;
  }

  tabsWindow = new BrowserWindow({
    width: 1400,
    height: 900,
    minWidth: 800,
    minHeight: 600,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
      webSecurity: false,
      allowRunningInsecureContent: true
    },
    title: '3D Printer Interfaces - v1.3.0',
    icon: getIconPath(),
    show: false
  });

  tabsWindow.loadFile('printer-tabs-window.html');

  tabsWindow.once('ready-to-show', () => {
    tabsWindow.show();
  });

  if (process.argv.includes('--dev')) {
    tabsWindow.webContents.openDevTools();
  }

  tabsWindow.on('closed', () => {
    tabsWindow = null;
    printerTabs.clear();
  });

  return tabsWindow;
}

function addPrinterTab(printerData) {
  const tabsWindow = createTabsWindow();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
  printerTabs.set(printerData.id, printerData);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–∫–Ω–æ –≤–∫–ª–∞–¥–æ–∫
  setTimeout(() => {
    if (tabsWindow && !tabsWindow.isDestroyed()) {
      tabsWindow.webContents.send('add-printer-tab', printerData);
    }
  }, 100);
}

function focusPrinterTab(printerId) {
  if (tabsWindow && !tabsWindow.isDestroyed() && printerTabs.has(printerId)) {
    tabsWindow.webContents.send('focus-printer-tab', printerId);
    tabsWindow.focus();
    return true;
  }
  return false;
}

// IPC handlers
ipcMain.handle('open-printer-window', (event, printerData) => {
  try {
    const sanitizedPrinterData = {
      id: String(printerData.id),
      name: String(printerData.name),
      ip: String(printerData.ip),
      port: String(printerData.port || '7125'),
      webPort: String(printerData.webPort || '80')
    };
    
    console.log('Opening printer tab for:', sanitizedPrinterData.name);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≤–∫–ª–∞–¥–∫–∞
    if (printerTabs.has(sanitizedPrinterData.id)) {
      focusPrinterTab(sanitizedPrinterData.id);
    } else {
      addPrinterTab(sanitizedPrinterData);
    }
    
    return { success: true };
  } catch (error) {
    console.error('Error opening printer tab:', error);
    return { success: false, error: error.message };
  }
});

ipcMain.handle('focus-printer-window', (event, printerId) => {
  return focusPrinterTab(String(printerId));
});

// –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ó–ê–ö–†–´–¢–ò–Ø –í–ö–õ–ê–î–ö–ò –ü–†–ò–ù–¢–ï–†–ê
ipcMain.on('close-printer-tab', (event, printerId) => {
  console.log('Closing printer tab:', printerId);
  if (printerTabs.has(printerId)) {
    printerTabs.delete(printerId);
    console.log('Printer tab removed from map:', printerId);
  }
});

// –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –í–û–ó–í–†–ê–¢–ê –ù–ê –ì–õ–ê–í–ù–´–ô –≠–ö–†–ê–ù
ipcMain.on('focus-main-window', (event) => {
  console.log('Focusing main window...');
  if (mainWindow && !mainWindow.isDestroyed()) {
    if (mainWindow.isMinimized()) {
      mainWindow.restore();
    }
    mainWindow.focus();
  }
});

ipcMain.handle('get-app-version', () => {
  return '1.3.0';
});

// Storage handlers
ipcMain.handle('store-get', (event, key, defaultValue) => {
  return store.get(key, defaultValue);
});

ipcMain.handle('store-set', (event, key, value) => {
  store.set(key, value);
  return true;
});

// Menu events
ipcMain.on('menu-add-printer', () => {
  if (mainWindow) {
    mainWindow.webContents.send('menu-add-printer');
  }
});

ipcMain.on('menu-test-all', () => {
  if (mainWindow) {
    mainWindow.webContents.send('menu-test-all');
  }
});

ipcMain.on('show-telegram-help', () => {
  const currentLang = getSavedLanguage();
  const isRussian = currentLang === 'ru';
  showTelegramHelp(isRussian);
});

// App events
app.whenReady().then(() => {
  createMainWindow();

  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createMainWindow();
    }
  });
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('before-quit', () => {
  if (tabsWindow && !tabsWindow.isDestroyed()) {
    tabsWindow.destroy();
  }
});