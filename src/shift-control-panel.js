// ============================================================================
// SHIFT CONTROL PANEL - UI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
// ============================================================================

import UserManager from './user-manager.js';
import ShiftManager from './shift-manager.js';
import ReportsManager from './reports-manager.js';

class ShiftControlPanel {
  constructor() {
    this.userManager = new UserManager();
    this.shiftManager = new ShiftManager();
    this.reportsManager = new ReportsManager(this.shiftManager, this.userManager);
    
    this.currentUser = null;
    this.currentShift = null;
    
    this.init();
  }

  async init() {
    this.currentUser = await window.electronAPI.storeGet('currentUser', null);
    
    if (!this.currentUser) {
      window.location.href = 'login.html';
      return;
    }

    this.shiftManager.loadCurrentShift();
    this.currentShift = this.shiftManager.getCurrentShift();

    this.createShiftInfoBar();
    this.createUserManagementModal();
    this.createShiftTransferModal();
    this.createReportsModal();
    
    this.updateShiftInfo();
    
    setInterval(() => this.updateShiftInfo(), 60000);
  }

  // ========== –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–ê–Ø –ü–ê–ù–ï–õ–¨ –°–ú–ï–ù–´ ==========

  createShiftInfoBar() {
    const existingBar = document.getElementById('shiftInfoBar');
    if (existingBar) existingBar.remove();

    const bar = document.createElement('div');
    bar.id = 'shiftInfoBar';
    bar.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 12px 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      z-index: 10000;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    `;

    bar.innerHTML = `
      <div style="display: flex; align-items: center; gap: 20px;">
        <div id="shiftUserInfo" style="display: flex; align-items: center; gap: 10px;">
          <span style="font-size: 20px;">üë§</span>
          <div>
            <div style="font-weight: 600; font-size: 14px;" id="shiftUsername">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            <div style="font-size: 11px; opacity: 0.9;" id="shiftDuration">--</div>
          </div>
        </div>
        ${this.currentUser.role === 'admin' ? `
          <button id="btnManageUsers" style="
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: white;
            padding: 6px 15px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
            font-weight: 600;
            transition: all 0.3s ease;
          ">
            üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
          </button>
        ` : ''}
        <button id="btnViewReports" style="
          background: rgba(255, 255, 255, 0.2);
          border: 1px solid rgba(255, 255, 255, 0.3);
          color: white;
          padding: 6px 15px;
          border-radius: 6px;
          cursor: pointer;
          font-size: 12px;
          font-weight: 600;
          transition: all 0.3s ease;
        ">
          üìä –û—Ç—á–µ—Ç—ã
        </button>
      </div>
      <div style="display: flex; gap: 10px; align-items: center;">
        <button id="btnTransferShift" style="
          background: rgba(255, 255, 255, 0.2);
          border: 1px solid rgba(255, 255, 255, 0.3);
          color: white;
          padding: 8px 16px;
          border-radius: 6px;
          cursor: pointer;
          font-size: 13px;
          font-weight: 600;
          transition: all 0.3s ease;
        ">
          üîÑ –ü–µ—Ä–µ–¥–∞—Ç—å —Å–º–µ–Ω—É
        </button>
        <button id="btnEndShift" style="
          background: rgba(220, 53, 69, 0.9);
          border: none;
          color: white;
          padding: 8px 16px;
          border-radius: 6px;
          cursor: pointer;
          font-size: 13px;
          font-weight: 600;
          transition: all 0.3s ease;
        ">
          üö™ –í—ã–π—Ç–∏
        </button>
      </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    const body = document.body;
    body.style.paddingTop = '60px';

    // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ body
    body.insertBefore(bar, body.firstChild);

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    this.attachBarEvents();
  }

  attachBarEvents() {
    const btnManageUsers = document.getElementById('btnManageUsers');
    const btnViewReports = document.getElementById('btnViewReports');
    const btnTransferShift = document.getElementById('btnTransferShift');
    const btnEndShift = document.getElementById('btnEndShift');

    if (btnManageUsers) {
      btnManageUsers.addEventListener('click', () => this.showUserManagementModal());
      btnManageUsers.addEventListener('mouseenter', (e) => {
        e.target.style.background = 'rgba(255, 255, 255, 0.3)';
      });
      btnManageUsers.addEventListener('mouseleave', (e) => {
        e.target.style.background = 'rgba(255, 255, 255, 0.2)';
      });
    }

    if (btnViewReports) {
      btnViewReports.addEventListener('click', () => this.showReportsModal());
      btnViewReports.addEventListener('mouseenter', (e) => {
        e.target.style.background = 'rgba(255, 255, 255, 0.3)';
      });
      btnViewReports.addEventListener('mouseleave', (e) => {
        e.target.style.background = 'rgba(255, 255, 255, 0.2)';
      });
    }

    btnTransferShift.addEventListener('click', () => this.showShiftTransferModal());
    btnTransferShift.addEventListener('mouseenter', (e) => {
      e.target.style.background = 'rgba(255, 255, 255, 0.3)';
    });
    btnTransferShift.addEventListener('mouseleave', (e) => {
      e.target.style.background = 'rgba(255, 255, 255, 0.2)';
    });

    btnEndShift.addEventListener('click', () => this.endShift());
    btnEndShift.addEventListener('mouseenter', (e) => {
      e.target.style.background = 'rgba(220, 53, 69, 1)';
    });
    btnEndShift.addEventListener('mouseleave', (e) => {
      e.target.style.background = 'rgba(220, 53, 69, 0.9)';
    });
  }

  updateShiftInfo() {
    this.currentShift = this.shiftManager.getCurrentShift();
    
    const usernameEl = document.getElementById('shiftUsername');
    const durationEl = document.getElementById('shiftDuration');

    if (this.currentShift && usernameEl && durationEl) {
      let roleEmoji = this.currentShift.role === 'admin' ? 'üëë' : 'üë§';
      let roleName = this.currentShift.role === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–û–ø–µ—Ä–∞—Ç–æ—Ä';
      
      if (this.currentUser && this.currentUser.isSuperAdmin) {
        roleEmoji = '‚ö°';
        roleName = 'SUPERADMIN';
      }
      
      usernameEl.textContent = `${roleEmoji} ${this.currentShift.displayName} (${roleName})`;
      durationEl.textContent = `–°–º–µ–Ω–∞: ${this.formatDuration(this.currentShift.duration)}`;
    }
  }

  // ========== –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ==========

  createUserManagementModal() {
    const modal = document.createElement('div');
    modal.id = 'userManagementModal';
    modal.style.cssText = `
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.7);
      z-index: 20000;
      overflow-y: auto;
      padding: 20px;
    `;

    modal.innerHTML = `
      <div style="
        max-width: 800px;
        margin: 40px auto;
        background: white;
        border-radius: 20px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        padding: 30px;
      ">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
          <h2 style="color: #333; margin: 0;">üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h2>
          <button id="closeUserManagementModal" style="
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #999;
            padding: 5px;
          ">‚úï</button>
        </div>

        <div style="margin-bottom: 20px;">
          <button id="btnAddOperator" style="
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
          ">
            ‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
          </button>
        </div>

        <div id="operatorsList" style="margin-top: 20px;"></div>

        <!-- –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ -->
        <div id="addOperatorForm" style="display: none; margin-top: 20px; padding: 20px; background: #f8f9fa; border-radius: 10px;">
          <h3 style="color: #333; margin-bottom: 15px;">–ù–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä</h3>
          <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px; color: #555; font-weight: 600;">–õ–æ–≥–∏–Ω</label>
            <input type="text" id="newOperatorUsername" placeholder="–õ–æ–≥–∏–Ω (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)" style="
              width: 100%;
              padding: 10px;
              border: 2px solid #e0e0e0;
              border-radius: 8px;
              font-size: 14px;
            ">
          </div>
          <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px; color: #555; font-weight: 600;">–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è</label>
            <input type="text" id="newOperatorDisplayName" placeholder="–ò–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è" style="
              width: 100%;
              padding: 10px;
              border: 2px solid #e0e0e0;
              border-radius: 8px;
              font-size: 14px;
            ">
          </div>
          <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px; color: #555; font-weight: 600;">–ü–∞—Ä–æ–ª—å</label>
            <input type="password" id="newOperatorPassword" placeholder="–ü–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞)" style="
              width: 100%;
              padding: 10px;
              border: 2px solid #e0e0e0;
              border-radius: 8px;
              font-size: 14px;
            ">
          </div>
          <div style="display: flex; gap: 10px;">
            <button id="btnSaveOperator" style="
              background: #28a745;
              color: white;
              border: none;
              padding: 10px 20px;
              border-radius: 8px;
              cursor: pointer;
              font-weight: 600;
            ">‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            <button id="btnCancelAddOperator" style="
              background: #6c757d;
              color: white;
              border: none;
              padding: 10px 20px;
              border-radius: 8px;
              cursor: pointer;
              font-weight: 600;
            ">‚ùå –û—Ç–º–µ–Ω–∞</button>
          </div>
        </div>
      </div>
    `;

    document.body.appendChild(modal);

    // –°–æ–±—ã—Ç–∏—è
    document.getElementById('closeUserManagementModal').addEventListener('click', () => this.closeModal('userManagementModal'));
    document.getElementById('btnAddOperator').addEventListener('click', () => this.showAddOperatorForm());
    document.getElementById('btnCancelAddOperator').addEventListener('click', () => this.hideAddOperatorForm());
    document.getElementById('btnSaveOperator').addEventListener('click', () => this.saveOperator());
  }

  showUserManagementModal() {
    this.refreshOperatorsList();
    document.getElementById('userManagementModal').style.display = 'block';
  }

  refreshOperatorsList() {
    const listEl = document.getElementById('operatorsList');
    const operators = this.userManager.getAllOperators();

    if (operators.length === 0) {
      listEl.innerHTML = '<p style="text-align: center; color: #999; padding: 20px;">–ù–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤</p>';
      return;
    }

    listEl.innerHTML = operators.map(op => `
      <div style="
        background: white;
        border: 2px solid ${op.isActive ? '#e0e0e0' : '#ffcdd2'};
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
      ">
        <div>
          <div style="font-weight: 600; color: #333; font-size: 16px;">
            ${op.displayName} 
            <span style="color: #999; font-size: 14px;">(${op.username})</span>
            ${!op.isActive ? '<span style="color: #dc3545; font-size: 12px;">‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω</span>' : ''}
          </div>
          <div style="color: #666; font-size: 12px; margin-top: 5px;">
            –°–æ–∑–¥–∞–Ω: ${new Date(op.createdAt).toLocaleString('ru-RU')}
          </div>
        </div>
        <div style="display: flex; gap: 8px;">
          <button onclick="shiftControlPanel.resetPassword('${op.id}')" style="
            background: #ffc107;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
            font-weight: 600;
          ">üîë –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å</button>
          <button onclick="shiftControlPanel.toggleOperatorStatus('${op.id}')" style="
            background: ${op.isActive ? '#6c757d' : '#28a745'};
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
            font-weight: 600;
          ">${op.isActive ? 'üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}</button>
          <button onclick="shiftControlPanel.removeOperator('${op.id}')" style="
            background: #dc3545;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
            font-weight: 600;
          ">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
        </div>
      </div>
    `).join('');
  }

  showAddOperatorForm() {
    document.getElementById('addOperatorForm').style.display = 'block';
    document.getElementById('newOperatorUsername').focus();
  }

  hideAddOperatorForm() {
    document.getElementById('addOperatorForm').style.display = 'none';
    document.getElementById('newOperatorUsername').value = '';
    document.getElementById('newOperatorDisplayName').value = '';
    document.getElementById('newOperatorPassword').value = '';
  }

  async saveOperator() {
    const username = document.getElementById('newOperatorUsername').value.trim();
    const displayName = document.getElementById('newOperatorDisplayName').value.trim() || username;
    const password = document.getElementById('newOperatorPassword').value;

    try {
      const result = this.userManager.addOperator(this.currentUser.id, username, password, displayName);
      if (result.success) {
        alert('‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
        this.hideAddOperatorForm();
        this.refreshOperatorsList();
      }
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
    }
  }

  resetPassword(operatorId) {
    const newPassword = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞):');
    if (!newPassword) return;

    try {
      this.userManager.resetOperatorPassword(this.currentUser.id, operatorId, newPassword);
      alert(`‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\n\n–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ${newPassword}\n\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â–∏—Ç–µ –µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!`);
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
    }
  }

  toggleOperatorStatus(operatorId) {
    try {
      const result = this.userManager.toggleOperatorStatus(this.currentUser.id, operatorId);
      if (result.success) {
        this.refreshOperatorsList();
      }
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
    }
  }

  removeOperator(operatorId) {
    const operator = this.userManager.getUserById(operatorId);
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ${operator.displayName}?`)) return;

    try {
      this.userManager.removeOperator(this.currentUser.id, operatorId);
      alert('‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω');
      this.refreshOperatorsList();
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
    }
  }

  // ========== –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –ü–ï–†–ï–î–ê–ß–ò –°–ú–ï–ù–´ ==========

  createShiftTransferModal() {
    const modal = document.createElement('div');
    modal.id = 'shiftTransferModal';
    modal.style.cssText = `
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.7);
      z-index: 20000;
      padding: 20px;
    `;

    modal.innerHTML = `
      <div style="
        max-width: 500px;
        margin: 100px auto;
        background: white;
        border-radius: 20px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        padding: 30px;
      ">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
          <h2 style="color: #333; margin: 0;">üîÑ –ü–µ—Ä–µ–¥–∞—á–∞ —Å–º–µ–Ω—ã</h2>
          <button id="closeShiftTransferModal" style="
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #999;
            padding: 5px;
          ">‚úï</button>
        </div>

        <div style="margin-bottom: 20px;">
          <label style="display: block; margin-bottom: 8px; color: #555; font-weight: 600;">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</label>
          <select id="transferToUser" style="
            width: 100%;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 14px;
          ">
            <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è --</option>
          </select>
        </div>

        <div style="margin-bottom: 20px;">
          <label style="display: block; margin-bottom: 8px; color: #555; font-weight: 600;">–ü–∞—Ä–æ–ª—å –Ω–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</label>
          <input type="password" id="transferPassword" placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" style="
            width: 100%;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 14px;
          ">
        </div>

        <button id="btnConfirmTransfer" style="
          width: 100%;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          color: white;
          border: none;
          padding: 14px;
          border-radius: 8px;
          cursor: pointer;
          font-size: 16px;
          font-weight: 600;
          box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        ">‚úÖ –ü–µ—Ä–µ–¥–∞—Ç—å —Å–º–µ–Ω—É</button>
      </div>
    `;

    document.body.appendChild(modal);

    document.getElementById('closeShiftTransferModal').addEventListener('click', () => this.closeModal('shiftTransferModal'));
    document.getElementById('btnConfirmTransfer').addEventListener('click', () => this.confirmTransfer());
  }

  showShiftTransferModal() {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const select = document.getElementById('transferToUser');
    select.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è --</option>';

    const users = [...this.userManager.getAdministrators(), ...this.userManager.getActiveOperators()];
    users.forEach(user => {
      if (user.id !== this.currentUser.id) {
        const option = document.createElement('option');
        option.value = user.id;
        option.textContent = `${user.displayName} (${user.username}) - ${user.role === 'admin' ? 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : 'üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä'}`;
        option.dataset.username = user.username;
        option.dataset.displayName = user.displayName;
        option.dataset.role = user.role;
        select.appendChild(option);
      }
    });

    document.getElementById('shiftTransferModal').style.display = 'block';
  }

  async confirmTransfer() {
    const select = document.getElementById('transferToUser');
    const password = document.getElementById('transferPassword').value;

    if (!select.value) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    if (!password) {
      alert('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
      return;
    }

    const selectedOption = select.options[select.selectedIndex];
    const newUserId = select.value;
    const newUsername = selectedOption.dataset.username;
    const newDisplayName = selectedOption.dataset.displayName;
    const newRole = selectedOption.dataset.role;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    try {
      const authResult = this.userManager.authenticate(newUsername, password);
      if (!authResult.success) {
        alert('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
        return;
      }

      // –ü–µ—Ä–µ–¥–∞–µ–º —Å–º–µ–Ω—É
      const result = this.shiftManager.transferShift(
        this.currentUser.id,
        newUserId,
        newUsername,
        newDisplayName,
        newRole
      );

      if (result.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.currentUser = authResult.user;
        await window.electronAPI.storeSet('currentUser', this.currentUser);

        alert('‚úÖ –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–∞!');
        this.closeModal('shiftTransferModal');
        this.updateShiftInfo();

        // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
        select.value = '';
        document.getElementById('transferPassword').value = '';
      }
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
    }
  }

  // ========== –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –û–¢–ß–ï–¢–û–í ==========

  createReportsModal() {
    const modal = document.createElement('div');
    modal.id = 'reportsModal';
    modal.style.cssText = `
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.7);
      z-index: 20000;
      overflow-y: auto;
      padding: 20px;
    `;

    modal.innerHTML = `
      <div style="
        max-width: 900px;
        margin: 40px auto;
        background: white;
        border-radius: 20px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        padding: 30px;
      ">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
          <h2 style="color: #333; margin: 0;">üìä –û—Ç—á–µ—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
          <button id="closeReportsModal" style="
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #999;
            padding: 5px;
          ">‚úï</button>
        </div>

        <div style="display: flex; gap: 10px; margin-bottom: 20px;">
          <select id="reportPeriod" style="
            padding: 10px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 14px;
          ">
            <option value="day">–ó–∞ –¥–µ–Ω—å</option>
            <option value="week">–ó–∞ –Ω–µ–¥–µ–ª—é</option>
            <option value="month">–ó–∞ –º–µ—Å—è—Ü</option>
          </select>
          
          ${this.currentUser.role === 'admin' ? `
            <select id="reportUser" style="
              flex: 1;
              padding: 10px;
              border: 2px solid #e0e0e0;
              border-radius: 8px;
              font-size: 14px;
            ">
              <option value="">–í—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã</option>
            </select>
          ` : ''}

          <button id="btnGenerateReport" style="
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
          ">üìà –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç</button>
        </div>

        <div id="reportContent" style="margin-top: 20px;"></div>
      </div>
    `;

    document.body.appendChild(modal);

    document.getElementById('closeReportsModal').addEventListener('click', () => this.closeModal('reportsModal'));
    document.getElementById('btnGenerateReport').addEventListener('click', () => this.generateReport());
  }

  showReportsModal() {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞
    if (this.currentUser.role === 'admin') {
      const select = document.getElementById('reportUser');
      select.innerHTML = '<option value="">–í—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã</option>';
      
      const operators = this.userManager.getAllOperators();
      operators.forEach(op => {
        const option = document.createElement('option');
        option.value = op.id;
        option.textContent = op.displayName;
        select.appendChild(option);
      });
    }

    document.getElementById('reportsModal').style.display = 'block';
  }

  generateReport() {
    const period = document.getElementById('reportPeriod').value;
    const userIdSelect = document.getElementById('reportUser');
    const userId = userIdSelect ? userIdSelect.value : this.currentUser.id;

    try {
      let report;
      
      if (userId) {
        // –û—Ç—á–µ—Ç –ø–æ –æ–¥–Ω–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        report = this.reportsManager.generateShortReport(userId, period);
        this.displayReport(report);
      } else {
        // –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
        const operatorIds = this.userManager.getAllOperators().map(op => op.id);
        report = this.reportsManager.generateComparativeReport(operatorIds, period);
        this.displayComparativeReport(report);
      }
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: ' + error.message);
    }
  }

  displayReport(report) {
    const content = document.getElementById('reportContent');
    content.innerHTML = `
      <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px;">
        <h3 style="margin: 0 0 10px 0;">–û–ø–µ—Ä–∞—Ç–æ—Ä: ${report.user.displayName}</h3>
        <p style="margin: 0; opacity: 0.9;">–ü–µ—Ä–∏–æ–¥: ${report.periodName}</p>
      </div>

      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px;">
        <div style="background: #f8f9fa; padding: 15px; border-radius: 10px; text-align: center;">
          <div style="font-size: 32px; font-weight: bold; color: ${this.getScoreColor(report.kpi.overallScore)};">${report.kpi.overallScore}</div>
          <div style="color: #666; font-size: 14px;">–û–±—â–∏–π –±–∞–ª–ª</div>
        </div>
        <div style="background: #f8f9fa; padding: 15px; border-radius: 10px; text-align: center;">
          <div style="font-size: 32px; font-weight: bold; color: ${this.getScoreColor(report.kpi.productivity)};">${report.kpi.productivity}</div>
          <div style="color: #666; font-size: 14px;">–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</div>
        </div>
        <div style="background: #f8f9fa; padding: 15px; border-radius: 10px; text-align: center;">
          <div style="font-size: 32px; font-weight: bold; color: ${this.getScoreColor(report.kpi.quality)};">${report.kpi.quality}</div>
          <div style="color: #666; font-size: 14px;">–ö–∞—á–µ—Å—Ç–≤–æ</div>
        </div>
        <div style="background: #f8f9fa; padding: 15px; border-radius: 10px; text-align: center;">
          <div style="font-size: 32px; font-weight: bold; color: ${this.getScoreColor(report.kpi.efficiency)};">${report.kpi.efficiency}</div>
          <div style="color: #666; font-size: 14px;">–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</div>
        </div>
      </div>

      <div style="background: #f8f9fa; padding: 20px; border-radius: 10px; margin-bottom: 20px;">
        <h4 style="margin: 0 0 15px 0; color: #333;">–°–≤–æ–¥–∫–∞</h4>
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
          <div><strong>–í—Å–µ–≥–æ —Å–º–µ–Ω:</strong> ${report.summary.totalShifts}</div>
          <div><strong>–û–±—â–µ–µ –≤—Ä–µ–º—è:</strong> ${report.summary.totalWorkTime}</div>
          <div><strong>–°—Ä–µ–¥–Ω—è—è —Å–º–µ–Ω–∞:</strong> ${report.summary.averageShiftDuration}</div>
          <div><strong>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:</strong> ${report.summary.completionRate}%</div>
        </div>
      </div>

      <div style="text-align: center; padding: 20px; background: ${this.getPerformanceBgColor(report.kpi.overallScore)}; border-radius: 10px;">
        <div style="font-size: 48px;">${report.summary.performance.emoji}</div>
        <div style="font-size: 24px; font-weight: bold; color: #333; margin-top: 10px;">${report.summary.performance.level}</div>
      </div>
    `;
  }

  displayComparativeReport(report) {
    const content = document.getElementById('reportContent');
    content.innerHTML = `
      <h3 style="margin-bottom: 15px;">–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç - ${report.periodName}</h3>
      
      <div style="margin-bottom: 20px;">
        ${report.ranking.map((item, index) => `
          <div style="
            background: ${index === 0 ? 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)' : '#f8f9fa'};
            color: ${index === 0 ? 'white' : '#333'};
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
          ">
            <div>
              <div style="font-size: 18px; font-weight: bold;">
                ${index === 0 ? 'üèÜ' : `${index + 1}.`} ${item.displayName}
              </div>
              <div style="font-size: 14px; opacity: ${index === 0 ? '0.9' : '0.7'};">
                –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${item.efficiencyScore}%
              </div>
            </div>
            <div style="font-size: 24px; font-weight: bold;">
              ${item.overallScore}
            </div>
          </div>
        `).join('')}
      </div>

      <div style="background: #e7f3ff; padding: 15px; border-radius: 10px;">
        <strong>–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</strong>
        <div style="margin-top: 10px; display: grid; grid-template-columns: repeat(4, 1fr); gap: 10px; text-align: center;">
          <div>
            <div style="font-size: 20px; font-weight: bold; color: #667eea;">${report.averages.overallScore}</div>
            <div style="font-size: 12px; color: #666;">–û–±—â–∏–π</div>
          </div>
          <div>
            <div style="font-size: 20px; font-weight: bold; color: #667eea;">${report.averages.productivity}</div>
            <div style="font-size: 12px; color: #666;">–ü—Ä–æ–¥—É–∫—Ç.</div>
          </div>
          <div>
            <div style="font-size: 20px; font-weight: bold; color: #667eea;">${report.averages.quality}</div>
            <div style="font-size: 12px; color: #666;">–ö–∞—á–µ—Å—Ç–≤–æ</div>
          </div>
          <div>
            <div style="font-size: 20px; font-weight: bold; color: #667eea;">${report.averages.efficiency}</div>
            <div style="font-size: 12px; color: #666;">–≠—Ñ—Ñ–µ–∫—Ç.</div>
          </div>
        </div>
      </div>
    `;
  }

  // ========== –ó–ê–í–ï–†–®–ï–ù–ò–ï –°–ú–ï–ù–´ ==========

  async endShift() {
    if (!confirm('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É –∏ –≤—ã–π—Ç–∏?')) return;

    try {
      this.shiftManager.endShift(this.currentUser.id);
      await window.electronAPI.storeSet('currentUser', null);
      await window.electronAPI.storeSet('isAuthenticated', false);
      
      window.location.href = 'login.html';
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: ' + error.message);
    }
  }

  // ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

  closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) modal.style.display = 'none';
  }

  formatDuration(ms) {
    if (!ms || ms === 0) return '0–º';
    
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);

    if (hours > 0) {
      return `${hours}—á ${minutes % 60}–º`;
    } else if (minutes > 0) {
      return `${minutes}–º`;
    } else {
      return `${seconds}—Å`;
    }
  }

  getScoreColor(score) {
    if (score >= 90) return '#28a745';
    if (score >= 75) return '#17a2b8';
    if (score >= 60) return '#ffc107';
    return '#dc3545';
  }

  getPerformanceBgColor(score) {
    if (score >= 90) return '#d4edda';
    if (score >= 75) return '#d1ecf1';
    if (score >= 60) return '#fff3cd';
    return '#f8d7da';
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
let shiftControlPanel;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('DOMContentLoaded', () => {
  shiftControlPanel = new ShiftControlPanel();
});

export default ShiftControlPanel;

