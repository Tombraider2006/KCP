/**
 * Web-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è 3D Printer Control Panel
 * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Socket.IO –∏ REST API
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let socket = null;
let printers = [];
let printerStatuses = new Map();

// –ó–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
let notificationSound = null;
let previousStatuses = new Map(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Socket.IO
function connectWebSocket() {
    const connectionStatus = document.getElementById('connectionStatus');
    const statusIndicator = connectionStatus.querySelector('.status-indicator');

    socket = io();

    socket.on('connect', () => {
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');
        connectionStatus.innerHTML = '<span class="status-indicator"></span><strong>–ü–æ–¥–∫–ª—é—á–µ–Ω–æ</strong>';
        loadPrinters();
    });

    socket.on('disconnect', () => {
        console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        connectionStatus.innerHTML = '<span class="status-indicator"></span><strong>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</strong>';
    });

    socket.on('initial-data', (data) => {
        console.log('üì¶ –ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);
        printers = data.printers || [];
        renderPrinters();
        updateStats();
    });

    socket.on('printer-update', (data) => {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–∞:', data);
        updatePrinterData(data.printerId, data.data);
    });

    socket.on('printer-status', (data) => {
        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞:', data);
        const printer = printers.find(p => p.id === data.printerId);
        if (printer) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
            checkCriticalStatus(data.printerId, printer.status);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            printerStatuses.set(data.printerId, data.status);
            updatePrinterCard(data.printerId);
            updateStats();
        }
    });

    socket.on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API
async function loadPrinters() {
    try {
        const response = await fetch('/api/printers');
        const data = await response.json();

        if (data.success) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤—ã–º–∏
            if (data.critical && data.critical.length > 0) {
                console.log('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', data.critical.length);
                data.critical.forEach(update => {
                    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
                    if (update.data && isCriticalStatus(update.data.status)) {
                        playCriticalSound();
                    }
                });
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã (–±–µ–∑ offline)
            printers = data.active || [];
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: ${printers.length}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
            if (data.stats) {
                updateStatsFromPackage(data.stats);
            }
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
            printers.forEach(printer => {
                socket.emit('subscribe-printer', printer.id);
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
                loadPrinterStatus(printer.id);
            });
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if (data.packageSize) {
                console.log(`üì¶ –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: ${data.packageSize} –±–∞–π—Ç`);
            }

            renderPrinters();
            updateStats();
        } else {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤:', data.error);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤:', error);
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
async function loadPrinterStatus(printerId) {
    try {
        const response = await fetch(`/api/printers/${printerId}/status`);
        const data = await response.json();

        if (data.success) {
            printerStatuses.set(printerId, data.status);
            updatePrinterCard(printerId);
            updateStats();
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ ${printerId}:`, error);
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ (—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —Å–µ—Ä–≤–µ—Ä–æ–º!)
function renderPrinters() {
    const grid = document.getElementById('printersGrid');

    if (printers.length === 0) {
        grid.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üñ®Ô∏è</div>
                <h3>–ü—Ä–∏–Ω—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã –≤ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</p>
            </div>
        `;
        return;
    }

    // –ü—Ä–∏–Ω—Ç–µ—Ä—ã —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É!
    grid.innerHTML = printers.map(printer => createPrinterCard(printer)).join('');
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å HTML
    document.querySelectorAll('.temp-text').forEach(el => {
        const printerId = el.closest('.printer-card').dataset.printerId;
        const printer = printers.find(p => p.id === printerId);
        if (printer) {
            el.innerHTML = getTemperatures(printer);
        }
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
function createPrinterCard(printer) {
    const status = printer.status || 'unknown';
    const printerType = printer.type || 'klipper';
    const printerTypeLabel = printerType === 'bambu' ? 'üéã Bambu Lab' : 'üñ®Ô∏è Klipper';
    const addressInfo = printer.ip;
    const webUrl = printer.type === 'bambu' 
        ? null 
        : `http://${printer.ip}:${printer.webPort || '80'}`;

    return `
        <div class="printer-card ${status}" data-printer-id="${printer.id}" ${webUrl ? `onclick="openPrinterWeb('${webUrl}'); return false;"` : ''} style="${webUrl ? 'cursor: pointer;' : ''}">
            <div class="printer-header">
                <div class="printer-name-row">
                    <span class="printer-name">${escapeHtml(printer.name)} <small style="opacity: 0.7;">${printerTypeLabel}</small></span>
                    <span class="printer-status status-${status}">
                        ${getStatusTextFromPrinter(printer)} ${printer.connectionType ? `(${printer.connectionType})` : ''}
                    </span>
                </div>
            </div>
            <div class="printer-info">
                <div class="info-item">
                    <span>–ê–¥—Ä–µ—Å:</span>
                    <span class="ip-address-large">${addressInfo}</span>
                </div>
                <div class="info-item">
                    <span>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</span>
                    <span class="state-text">${getStateText(printer)}</span>
                </div>
                <div class="info-item">
                    <span>–§–∞–π–ª:</span>
                    <span class="file-text">${getFileName(printer)}</span>
                </div>
                <div class="info-item">
                    <span>–ü—Ä–æ–≥—Ä–µ—Å—Å:</span>
                    <span class="progress-text-large ${getProgressClass(printer)}">
                        ${getProgress(printer)}
                    </span>
                </div>
                <div class="info-item">
                    <span>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:</span>
                    <span class="temp-text">${getTemperatures(printer)}</span>
                </div>
                ${printer.lastUpdate ? `
                <div class="info-item">
                    <span>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</span>
                    <span class="updated-text">${formatTime(printer.lastUpdate)}</span>
                </div>
                ` : ''}
            </div>
            <div class="printer-actions" onclick="event.stopPropagation(); return false;">
                <button class="btn btn-warning btn-small" onclick="testPrinter('${printer.id}'); return false;">
                    üîó –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
                </button>
            </div>
        </div>
    `;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)

function getStatusTextFromPrinter(printer) {
    const statusMap = {
        'printing': '–ü–µ—á–∞—Ç–∞–µ—Ç',
        'ready': '–ì–æ—Ç–æ–≤',
        'complete': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
        'paused': '–ù–∞ –ø–∞—É–∑–µ',
        'offline': 'Offline',
        'error': '–û—à–∏–±–∫–∞',
        'standby': '–ì–æ—Ç–æ–≤',
        'idle': '–ì–æ—Ç–æ–≤',
        'unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    };
    return statusMap[printer.status] || printer.status || '–ì–æ—Ç–æ–≤';
}

function getStateText(printer) {
    if (!printer.data) return '‚Äî';
    
    const state = printer.data.state || printer.data.print_stats?.state || printer.data.stateText || '‚Äî';
    
    if (state === '‚Äî') return '‚Äî';
    
    const stateMap = {
        'standby': '–ì–æ—Ç–æ–≤',
        'printing': '–ü–µ—á–∞—Ç–∞–µ—Ç',
        'paused': '–ù–∞ –ø–∞—É–∑–µ',
        'complete': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–æ',
        'error': '–û—à–∏–±–∫–∞',
        'ready': '–ì–æ—Ç–æ–≤',
        'idle': '–ì–æ—Ç–æ–≤'
    };
    
    const stateLower = state.toLowerCase();
    return stateMap[stateLower] || state;
}

function getFileName(printer) {
    if (!printer.data) return '‚Äî';
    return printer.data.filename || printer.data.print_stats?.filename || '‚Äî';
}

function getProgress(printer) {
    if (!printer.data) return '‚Äî';
    
    const progress = printer.data.progress || 
                    (printer.data.print_stats?.info?.total_duration && printer.data.print_stats?.info?.print_duration
                        ? Math.round((printer.data.print_stats.info.print_duration / printer.data.print_stats.info.total_duration) * 100)
                        : 0);
    
    return progress ? `${progress}%` : '‚Äî';
}

function getProgressClass(printer) {
    const progressText = getProgress(printer);
    
    // –ú–∏–≥–∞–Ω–∏–µ –ø—Ä–∏ 100%
    if (progressText === '100%') {
        return 'progress-100-animation';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º 95-100%
    const progressNum = parseInt(progressText);
    if (progressNum >= 95 && progressNum <= 100) {
        return 'progress-95-plus';
    }
    
    return '';
}

function getTemperatures(printer) {
    if (!printer.data || !printer.data.temps) return '‚Äî';
    
    const temps = printer.data.temps;
    const nozzle = temps.nozzle_temp || temps.nozzle || temps.extruder?.temperature || 0;
    const bed = temps.bed_temp || temps.bed || temps.heater_bed?.temperature || 0;
    const chamber = temps.chamber_temp || temps.chamber || null;
    
    // –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è: —Å–æ–ø–ª–æ >170¬∞C = –∫—Ä–∞—Å–Ω—ã–π
    const nozzleRounded = Math.round(nozzle);
    const nozzleHtml = nozzleRounded > 170 
        ? `<span style="color: #ff4444; font-weight: bold;">üå°Ô∏è ${nozzleRounded}¬∞C</span>` 
        : `üå°Ô∏è ${nozzleRounded}¬∞C`;
    
    let tempText = `${nozzleHtml} / üõèÔ∏è ${Math.round(bed)}¬∞C`;
    
    if (chamber !== null && chamber !== undefined) {
        tempText += ` / üì¶ ${Math.round(chamber)}¬∞C`;
    }
    
    return tempText;
}

function formatTime(timestamp) {
    if (!timestamp) return '‚Äî';
    
    const now = new Date();
    const updateTime = new Date(timestamp);
    const diffMs = now - updateTime;
    const diffSec = Math.floor(diffMs / 1000);
    
    if (diffSec < 60) return `${diffSec}—Å –Ω–∞–∑–∞–¥`;
    if (diffSec < 3600) return `${Math.floor(diffSec / 60)}–º –Ω–∞–∑–∞–¥`;
    if (diffSec < 86400) return `${Math.floor(diffSec / 3600)}—á –Ω–∞–∑–∞–¥`;
    
    return updateTime.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
function updatePrinterCard(printerId) {
    const card = document.querySelector(`[data-printer-id="${printerId}"]`);
    if (!card) return;

    const printer = printers.find(p => p.id === printerId);
    if (!printer) return;

    card.outerHTML = createPrinterCard(printer);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –∑–∞–Ω–æ–≤–æ
    const newCard = document.querySelector(`[data-printer-id="${printerId}"]`);
    if (newCard) {
        // –ö–ª–∏–∫ —É–±–∏—Ä–∞–µ–º - —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ HTML —á–µ—Ä–µ–∑ onclick
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–∞
function updatePrinterData(printerId, data) {
    const printer = printers.find(p => p.id === printerId);
    if (printer) {
        printer.data = data;
        updatePrinterCard(printerId);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    const total = printers.length;
    let online = 0;
    let printing = 0;
    let paused = 0;

    printers.forEach(printer => {
        const status = printerStatuses.get(printer.id);
        if (!status) return;

        const state = (status.state || '').toLowerCase();
        
        if (state.includes('ready') || state.includes('idle') || state.includes('print')) {
            online++;
        }
        if (state.includes('print') || state === 'running') {
            printing++;
        }
        if (state.includes('pause')) {
            paused++;
        }
    });

    document.getElementById('totalPrinters').textContent = total;
    document.getElementById('onlinePrinters').textContent = online;
    document.getElementById('printingPrinters').textContent = printing;
    document.getElementById('pausedPrinters').textContent = paused;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
async function showPrinterDetails(printerId) {
    const modal = document.getElementById('printerModal');
    const modalTitle = document.getElementById('modalTitle');
    const modalBody = document.getElementById('modalBody');

    const printer = printers.find(p => p.id === printerId);
    if (!printer) return;

    modalTitle.textContent = printer.name;
    modalBody.innerHTML = '<div class="loading"><div class="spinner"></div><p>–ó–∞–≥—Ä—É–∑–∫–∞...</p></div>';
    modal.classList.add('active');

    try {
        const response = await fetch(`/api/printers/${printerId}`);
        const data = await response.json();

        if (data.success) {
            const printerData = data.printer;
            const status = printerStatuses.get(printerId) || {};

            modalBody.innerHTML = `
                <div style="display: flex; flex-direction: column; gap: 1rem;">
                    <div style="padding: 1rem; background: var(--bg-color); border-radius: 8px;">
                        <strong>–¢–∏–ø:</strong> ${printerData.type || 'klipper'}<br>
                        <strong>IP:</strong> ${printerData.ip}<br>
                        <strong>–°—Ç–∞—Ç—É—Å:</strong> ${getStatusText(status)}
                    </div>
                    
                    ${status.temps ? `
                    <div style="padding: 1rem; background: var(--bg-color); border-radius: 8px;">
                        <h3 style="margin-bottom: 0.5rem;">üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã</h3>
                        <strong>–°–æ–ø–ª–æ:</strong> ${status.temps.nozzle || 0}¬∞C / ${status.temps.nozzle_target || 0}¬∞C<br>
                        <strong>–°—Ç–æ–ª:</strong> ${status.temps.bed || 0}¬∞C / ${status.temps.bed_target || 0}¬∞C<br>
                        ${status.temps.chamber !== null && status.temps.chamber !== undefined ? 
                            `<strong>–ö–∞–º–µ—Ä–∞:</strong> ${status.temps.chamber}¬∞C<br>` : ''}
                    </div>
                    ` : ''}
                    
                    ${status.progress ? `
                    <div style="padding: 1rem; background: var(--bg-color); border-radius: 8px;">
                        <h3 style="margin-bottom: 0.5rem;">üìä –ü–µ—á–∞—Ç—å</h3>
                        <strong>–ü—Ä–æ–≥—Ä–µ—Å—Å:</strong> ${status.progress}%<br>
                        ${status.fileName ? `<strong>–§–∞–π–ª:</strong> ${escapeHtml(status.fileName)}<br>` : ''}
                    </div>
                    ` : ''}
                    
                    <div style="padding: 1rem; background: var(--bg-color); border-radius: 8px;">
                        <p style="color: var(--text-secondary); font-size: 0.9rem;">
                            üí° <strong>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</strong> –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                        </p>
                    </div>
                </div>
            `;
        } else {
            modalBody.innerHTML = '<p style="color: var(--error-color);">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–∞</p>';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∏–Ω—Ç–µ—Ä–∞:', error);
        modalBody.innerHTML = '<p style="color: var(--error-color);">–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É</p>';
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
    const modal = document.getElementById('printerModal');
    modal.classList.remove('active');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
function showError(message) {
    const grid = document.getElementById('printersGrid');
    grid.innerHTML = `
        <div class="empty-state">
            <div class="empty-state-icon">‚ö†Ô∏è</div>
            <h3>–û—à–∏–±–∫–∞</h3>
            <p>${message}</p>
        </div>
    `;
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
function openPrinterWeb(url) {
    console.log('üåê –û—Ç–∫—Ä—ã—Ç–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:', url);
    window.open(url, '_blank');
    return false; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
async function testPrinter(printerId) {
    console.log('üîç Testing printer:', printerId);
    
    const printer = printers.find(p => p.id === printerId);
    if (!printer) return;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏
    const card = document.querySelector(`[data-printer-id="${printerId}"]`);
    const btn = card?.querySelector('.btn-warning');
    
    if (btn) {
        const originalText = btn.textContent;
        btn.textContent = '‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞...';
        btn.disabled = true;
        
        try {
            const response = await fetch(`/api/printers/${printerId}/status`);
            const data = await response.json();
            
            if (data.success) {
                console.log('‚úÖ –ü—Ä–∏–Ω—Ç–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω:', printer.name, '-', data.status?.state || 'unknown');
                btn.textContent = '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω';
                btn.style.background = 'rgba(76, 175, 80, 0.3)';
                btn.style.borderColor = 'rgba(76, 175, 80, 0.6)';
                
                setTimeout(() => {
                    btn.textContent = originalText;
                    btn.style.background = '';
                    btn.style.borderColor = '';
                }, 2000);
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', printer.name, '-', data.error);
                btn.textContent = '‚ùå –û—à–∏–±–∫–∞';
                btn.style.background = 'rgba(244, 67, 54, 0.3)';
                btn.style.borderColor = 'rgba(244, 67, 54, 0.6)';
                
                setTimeout(() => {
                    btn.textContent = originalText;
                    btn.style.background = '';
                    btn.style.borderColor = '';
                }, 2000);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            btn.textContent = '‚ùå –ù–µ—Ç —Å–≤—è–∑–∏';
            btn.style.background = 'rgba(244, 67, 54, 0.3)';
            
            setTimeout(() => {
                btn.textContent = originalText;
                btn.style.background = '';
            }, 2000);
        } finally {
            btn.disabled = false;
        }
    }
    
    return false; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö
function playCriticalSound() {
    if (!notificationSound) {
        notificationSound = new Audio('windows-xp-print-complete.mp3');
    }
    
    notificationSound.play().catch(err => {
        console.error('Error playing sound:', err);
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞
function checkCriticalStatus(printerId, newStatus) {
    const oldStatus = previousStatuses.get(printerId);
    const criticalStatuses = ['error', 'paused', 'complete'];
    
    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π - –∏–≥—Ä–∞–µ–º –∑–≤—É–∫
    if (criticalStatuses.includes(newStatus) && oldStatus !== newStatus) {
        console.log(`üîä Critical status for ${printerId}: ${newStatus}`);
        playCriticalSound();
    }
    
    previousStatuses.set(printerId, newStatus);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞');

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–≤—É–∫
    notificationSound = new Audio('windows-xp-print-complete.mp3');
    notificationSound.volume = 0.5; // 50% –≥—Ä–æ–º–∫–æ—Å—Ç–∏

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
    connectWebSocket();

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const modalClose = document.getElementById('modalClose');
    modalClose.addEventListener('click', closeModal);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
    const modal = document.getElementById('printerModal');
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal();
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            closeModal();
        }
    });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
function isCriticalStatus(status) {
    const criticalStatuses = ['error', 'paused', 'complete'];
    return criticalStatuses.includes(status);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ø–∞–∫–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
function updateStatsFromPackage(stats) {
    const totalPrintersEl = document.getElementById('totalPrinters');
    const onlinePrintersEl = document.getElementById('onlinePrinters');
    const printingPrintersEl = document.getElementById('printingPrinters');
    const pausedPrintersEl = document.getElementById('pausedPrinters');
    
    if (totalPrintersEl) totalPrintersEl.textContent = stats.total || 0;
    if (onlinePrintersEl) onlinePrintersEl.textContent = stats.online || 0;
    if (printingPrintersEl) printingPrintersEl.textContent = stats.printing || 0;
    if (pausedPrintersEl) pausedPrintersEl.textContent = stats.paused || 0;
}
