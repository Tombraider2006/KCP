// ============================================================================
// REPORTS MANAGER - –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –∏ KPI
// ============================================================================

const Store = require('electron-store');

class ReportsManager {
  constructor(shiftManager, userManager) {
    this.shiftManager = shiftManager;
    this.userManager = userManager;
    this.store = new Store({
      name: 'reports-data',
      encryptionKey: 'y0ur-s3cr3t-k3y-f0r-r3p0rts-d4t4'
    });
  }

  // ========== –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–û–í ==========

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç (KPI)
   */
  generateShortReport(userId, period = 'day') {
    const user = this.userManager.getUserById(userId);
    if (!user) {
      throw new Error('User not found');
    }

    const stats = this.shiftManager.getUserShiftStatistics(userId, period);
    const shifts = this.shiftManager.getShiftHistory({ 
      userId, 
      limit: 1000 
    }).filter(s => this.isInPeriod(s.startTime, period));

    const kpi = this.calculateKPI(stats, shifts);

    return {
      period,
      periodName: this.getPeriodName(period),
      user: {
        id: user.id,
        username: user.username,
        displayName: user.displayName,
        role: user.role
      },
      dateRange: this.getDateRange(period),
      generatedAt: new Date().toISOString(),
      kpi,
      summary: {
        totalShifts: stats.totalShifts,
        totalWorkTime: this.formatDuration(stats.totalDuration),
        averageShiftDuration: this.formatDuration(stats.averageDuration),
        efficiencyScore: stats.averageEfficiency,
        completionRate: this.calculateCompletionRate(stats),
        performance: this.getPerformanceLevel(kpi.overallScore)
      }
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  generateDetailedReport(userId, period = 'day') {
    const shortReport = this.generateShortReport(userId, period);
    const user = this.userManager.getUserById(userId);
    
    const shifts = this.shiftManager.getShiftHistory({ 
      userId, 
      limit: 1000 
    }).filter(s => this.isInPeriod(s.startTime, period));

    // –ê–Ω–∞–ª–∏–∑ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const inefficiencyAnalysis = this.analyzeInefficiency(shifts);

    // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–º–µ–Ω–∞–º
    const shiftDetails = shifts.map(shift => ({
      id: shift.id,
      startTime: shift.startTime,
      endTime: shift.endTime,
      duration: this.formatDuration(shift.duration),
      statistics: shift.statistics,
      events: shift.events,
      notes: shift.notes,
      inefficiencies: this.getShiftInefficiencies(shift)
    }));

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const recommendations = this.generateRecommendations(
      shortReport.kpi, 
      inefficiencyAnalysis
    );

    return {
      ...shortReport,
      inefficiencyAnalysis,
      shiftDetails,
      recommendations,
      charts: this.prepareChartData(shifts, period)
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç (–Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤)
   */
  generateComparativeReport(userIds, period = 'day') {
    const reports = userIds.map(userId => {
      try {
        return this.generateShortReport(userId, period);
      } catch (error) {
        return null;
      }
    }).filter(r => r !== null);

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É –±–∞–ª–ª—É
    reports.sort((a, b) => b.kpi.overallScore - a.kpi.overallScore);

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const averages = this.calculateAverages(reports);

    return {
      period,
      periodName: this.getPeriodName(period),
      dateRange: this.getDateRange(period),
      generatedAt: new Date().toISOString(),
      reports,
      averages,
      ranking: reports.map((r, index) => ({
        rank: index + 1,
        userId: r.user.id,
        displayName: r.user.displayName,
        overallScore: r.kpi.overallScore,
        efficiencyScore: r.summary.efficiencyScore
      }))
    };
  }

  // ========== –†–ê–°–ß–ï–¢ KPI ==========

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç KPI –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
   */
  calculateKPI(stats, shifts) {
    const kpi = {
      productivity: 0,        // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      quality: 0,             // –ö–∞—á–µ—Å—Ç–≤–æ
      efficiency: 0,          // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      reliability: 0,         // –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å
      overallScore: 0         // –û–±—â–∏–π –±–∞–ª–ª
    };

    // 1. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (0-100)
    // –ë–∞–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–µ—á–∞—Ç–µ–π –∑–∞ —Å–º–µ–Ω—É
    if (stats.totalShifts > 0 && stats.totalDuration > 0) {
      const avgPrintsPerHour = (stats.totalPrintsCompleted / (stats.totalDuration / (1000 * 60 * 60)));
      kpi.productivity = Math.min(100, avgPrintsPerHour * 20); // 5 –ø–µ—á–∞—Ç–µ–π/—á–∞—Å = 100 –±–∞–ª–ª–æ–≤
    }

    // 2. –ö–∞—á–µ—Å—Ç–≤–æ (0-100)
    // –ë–∞–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–µ —É—Å–ø–µ—à–Ω—ã—Ö –ø–µ—á–∞—Ç–µ–π
    if (stats.totalPrintsStarted > 0) {
      const successRate = stats.totalPrintsCompleted / stats.totalPrintsStarted;
      kpi.quality = Math.round(successRate * 100);
    } else {
      kpi.quality = 100; // –ï—Å–ª–∏ –ø–µ—á–∞—Ç–µ–π –Ω–µ –±—ã–ª–æ, –∫–∞—á–µ—Å—Ç–≤–æ 100
    }

    // 3. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (0-100)
    // –ë–µ—Ä–µ–º –∏–∑ —Å—Ä–µ–¥–Ω–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–º–µ–Ω
    kpi.efficiency = stats.averageEfficiency;

    // 4. –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å (0-100)
    // –ë–∞–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ—Å—Ç–æ–µ–≤ –∏ –ø–∞—É–∑
    if (stats.totalDuration > 0) {
      const idleRatio = (stats.totalGapTime + stats.totalPauseTime) / stats.totalDuration;
      kpi.reliability = Math.max(0, Math.round(100 - (idleRatio * 100)));
    } else {
      kpi.reliability = 100;
    }

    // 5. –û–±—â–∏–π –±–∞–ª–ª (—Å—Ä–µ–¥–Ω–µ–µ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ)
    kpi.overallScore = Math.round(
      (kpi.productivity * 0.3) +
      (kpi.quality * 0.3) +
      (kpi.efficiency * 0.25) +
      (kpi.reliability * 0.15)
    );

    return kpi;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  calculateCompletionRate(stats) {
    if (stats.totalPrintsStarted === 0) {
      return 100;
    }
    return Math.round((stats.totalPrintsCompleted / stats.totalPrintsStarted) * 100);
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  getPerformanceLevel(score) {
    if (score >= 90) return { level: '–û—Ç–ª–∏—á–Ω—ã–π', emoji: 'üåü' };
    if (score >= 75) return { level: '–•–æ—Ä–æ—à–∏–π', emoji: '‚úÖ' };
    if (score >= 60) return { level: '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π', emoji: 'üëç' };
    if (score >= 40) return { level: '–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ', emoji: '‚ö†Ô∏è' };
    return { level: '–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è', emoji: '‚ùå' };
  }

  // ========== –ê–ù–ê–õ–ò–ó –ù–ï–≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò ==========

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏—á–∏–Ω—ã –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  analyzeInefficiency(shifts) {
    const analysis = {
      totalInefficiencies: 0,
      categories: {
        gaps: { count: 0, totalTime: 0, percentage: 0 },
        pauses: { count: 0, totalTime: 0, percentage: 0 },
        failures: { count: 0, percentage: 0 }
      },
      topIssues: [],
      detailedEvents: []
    };

    let totalIssueTime = 0;

    shifts.forEach(shift => {
      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ gaps
      analysis.categories.gaps.count += shift.statistics.gaps;
      analysis.categories.gaps.totalTime += shift.statistics.totalGapTime;
      totalIssueTime += shift.statistics.totalGapTime;

      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—É–∑–∞—Ö
      analysis.categories.pauses.count += shift.statistics.pauses;
      analysis.categories.pauses.totalTime += shift.statistics.totalPauseTime;
      totalIssueTime += shift.statistics.totalPauseTime;

      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ—É–¥–∞—á–∞—Ö
      analysis.categories.failures.count += shift.statistics.printsFailed;

      // –°–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
      shift.events.forEach(event => {
        if (['gap_detected', 'pause_detected', 'print_failed'].includes(event.type)) {
          analysis.detailedEvents.push({
            shiftId: shift.id,
            timestamp: event.timestamp,
            type: event.type,
            data: event.data,
            operator: shift.displayName
          });
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∫–∞–∫ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
      shift.notes.forEach(note => {
        analysis.detailedEvents.push({
          shiftId: shift.id,
          timestamp: note.timestamp,
          type: 'operator_note',
          data: { text: note.text },
          operator: shift.displayName
        });
      });
    });

    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    if (totalIssueTime > 0) {
      analysis.categories.gaps.percentage = 
        Math.round((analysis.categories.gaps.totalTime / totalIssueTime) * 100);
      analysis.categories.pauses.percentage = 
        Math.round((analysis.categories.pauses.totalTime / totalIssueTime) * 100);
    }

    const totalPrints = shifts.reduce((sum, s) => sum + s.statistics.printsStarted, 0);
    if (totalPrints > 0) {
      analysis.categories.failures.percentage = 
        Math.round((analysis.categories.failures.count / totalPrints) * 100);
    }

    analysis.totalInefficiencies = 
      analysis.categories.gaps.count + 
      analysis.categories.pauses.count + 
      analysis.categories.failures.count;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ø –ø—Ä–æ–±–ª–µ–º
    const issues = [
      { 
        type: '–ü–µ—Ä–µ—Ä—ã–≤—ã –º–µ–∂–¥—É –ø–µ—á–∞—Ç—è–º–∏', 
        count: analysis.categories.gaps.count,
        time: analysis.categories.gaps.totalTime,
        severity: this.calculateSeverity(analysis.categories.gaps.count, analysis.categories.gaps.totalTime)
      },
      { 
        type: '–ü–∞—É–∑—ã –≤–æ –≤—Ä–µ–º—è –ø–µ—á–∞—Ç–∏', 
        count: analysis.categories.pauses.count,
        time: analysis.categories.pauses.totalTime,
        severity: this.calculateSeverity(analysis.categories.pauses.count, analysis.categories.pauses.totalTime)
      },
      { 
        type: '–ù–µ—É–¥–∞—á–Ω—ã–µ –ø–µ—á–∞—Ç–∏', 
        count: analysis.categories.failures.count,
        time: 0,
        severity: this.calculateSeverity(analysis.categories.failures.count, 0)
      }
    ];

    analysis.topIssues = issues
      .filter(i => i.count > 0)
      .sort((a, b) => b.severity - a.severity);

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    analysis.detailedEvents.sort((a, b) => 
      new Date(b.timestamp) - new Date(a.timestamp)
    );

    return analysis;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–º–µ–Ω—ã
   */
  getShiftInefficiencies(shift) {
    const inefficiencies = [];

    // Gaps
    if (shift.statistics.gaps > 0) {
      inefficiencies.push({
        type: 'gap',
        count: shift.statistics.gaps,
        totalTime: shift.statistics.totalGapTime,
        description: `–ü–µ—Ä–µ—Ä—ã–≤—ã –º–µ–∂–¥—É –ø–µ—á–∞—Ç—è–º–∏: ${shift.statistics.gaps} —Ä–∞–∑(–∞), –≤—Å–µ–≥–æ ${this.formatDuration(shift.statistics.totalGapTime)}`
      });
    }

    // Pauses
    if (shift.statistics.pauses > 0) {
      inefficiencies.push({
        type: 'pause',
        count: shift.statistics.pauses,
        totalTime: shift.statistics.totalPauseTime,
        description: `–ü–∞—É–∑—ã –≤–æ –≤—Ä–µ–º—è –ø–µ—á–∞—Ç–∏: ${shift.statistics.pauses} —Ä–∞–∑(–∞), –≤—Å–µ–≥–æ ${this.formatDuration(shift.statistics.totalPauseTime)}`
      });
    }

    // Failures
    if (shift.statistics.printsFailed > 0) {
      inefficiencies.push({
        type: 'failure',
        count: shift.statistics.printsFailed,
        description: `–ù–µ—É–¥–∞—á–Ω—ã–µ –ø–µ—á–∞—Ç–∏: ${shift.statistics.printsFailed} —Ä–∞–∑(–∞)`
      });
    }

    return inefficiencies;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
   */
  calculateSeverity(count, time) {
    let severity = count * 10;
    if (time > 0) {
      severity += (time / (1000 * 60)) * 2; // +2 –∑–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }
    return severity;
  }

  // ========== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ==========

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
   */
  generateRecommendations(kpi, inefficiencyAnalysis) {
    const recommendations = [];

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (kpi.productivity < 70) {
      recommendations.push({
        category: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        priority: 'high',
        issue: '–ù–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—á–∞—Ç–µ–π',
        suggestion: '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–µ—á–∞—Ç–∏. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–π—Ç–µ —Ñ–∞–π–ª—ã –∑–∞—Ä–∞–Ω–µ–µ.'
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
    if (kpi.quality < 80) {
      recommendations.push({
        category: '–ö–∞—á–µ—Å—Ç–≤–æ',
        priority: 'high',
        issue: '–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–µ—á–∞—Ç–µ–π',
        suggestion: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–∞–π—Å–µ—Ä–∞, –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤.'
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (kpi.efficiency < 75) {
      recommendations.push({
        category: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        priority: 'medium',
        issue: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã',
        suggestion: '–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –º–µ–∂–¥—É –ø–µ—á–∞—Ç—è–º–∏. –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞—á–∏ –∑–∞—Ä–∞–Ω–µ–µ.'
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    if (kpi.reliability < 80) {
      recommendations.push({
        category: '–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å',
        priority: 'medium',
        issue: '–ß–∞—Å—Ç—ã–µ –ø–∞—É–∑—ã –∏ –ø–µ—Ä–µ—Ä—ã–≤—ã',
        suggestion: '–ò–∑–±–µ–≥–∞–π—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø–∞—É–∑ –≤–æ –≤—Ä–µ–º—è –ø–µ—á–∞—Ç–∏. –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ.'
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ gaps
    if (inefficiencyAnalysis.categories.gaps.count > 5) {
      recommendations.push({
        category: '–ü–µ—Ä–µ—Ä—ã–≤—ã',
        priority: 'medium',
        issue: '–ú–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –º–µ–∂–¥—É –ø–µ—á–∞—Ç—è–º–∏',
        suggestion: '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—á–∞—Ç–∏ –∑–∞—Ä–∞–Ω–µ–µ. –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –∑–∞–¥–∞–Ω–∏—è–º–∏.'
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∞—É–∑–∞–º
    if (inefficiencyAnalysis.categories.pauses.count > 3) {
      recommendations.push({
        category: '–ü–∞—É–∑—ã',
        priority: 'high',
        issue: '–ß–∞—Å—Ç—ã–µ –ø–∞—É–∑—ã –≤–æ –≤—Ä–µ–º—è –ø–µ—á–∞—Ç–∏',
        suggestion: '–ò–∑–±–µ–≥–∞–π—Ç–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—á–∞—Ç–∏ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏—á–∏–Ω—ã –ø–∞—É–∑.'
      });
    }

    // –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ
    if (recommendations.length === 0) {
      recommendations.push({
        category: '–û–±—â–µ–µ',
        priority: 'info',
        issue: '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!',
        suggestion: '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ. –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ.'
      });
    }

    return recommendations;
  }

  // ========== –î–ê–ù–ù–´–ï –î–õ–Ø –ì–†–ê–§–ò–ö–û–í ==========

  /**
   * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
   */
  prepareChartData(shifts, period) {
    // –ì—Ä–∞—Ñ–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const efficiencyChart = {
      labels: [],
      data: []
    };

    // –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const productivityChart = {
      labels: [],
      data: []
    };

    // –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    const timeDistribution = {
      labels: ['–ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '–ü–µ—Ä–µ—Ä—ã–≤—ã', '–ü–∞—É–∑—ã'],
      data: [0, 0, 0]
    };

    shifts.forEach(shift => {
      const date = new Date(shift.startTime).toLocaleDateString('ru-RU');
      efficiencyChart.labels.push(date);
      efficiencyChart.data.push(shift.statistics.efficiencyScore);

      productivityChart.labels.push(date);
      productivityChart.data.push(shift.statistics.printsCompleted);

      const activeTime = shift.duration - shift.statistics.totalGapTime - shift.statistics.totalPauseTime;
      timeDistribution.data[0] += activeTime;
      timeDistribution.data[1] += shift.statistics.totalGapTime;
      timeDistribution.data[2] += shift.statistics.totalPauseTime;
    });

    return {
      efficiency: efficiencyChart,
      productivity: productivityChart,
      timeDistribution
    };
  }

  // ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–∞—Ç–∞ –≤ –ø–µ—Ä–∏–æ–¥
   */
  isInPeriod(dateString, period) {
    const date = new Date(dateString);
    const now = new Date();

    switch (period) {
      case 'day':
        return now - date < 24 * 60 * 60 * 1000;
      case 'week':
        return now - date < 7 * 24 * 60 * 60 * 1000;
      case 'month':
        return now - date < 30 * 24 * 60 * 60 * 1000;
      case 'all':
        return true;
      default:
        return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
   */
  getPeriodName(period) {
    const names = {
      'day': '–ó–∞ –¥–µ–Ω—å',
      'week': '–ó–∞ –Ω–µ–¥–µ–ª—é',
      'month': '–ó–∞ –º–µ—Å—è—Ü',
      'all': '–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è'
    };
    return names[period] || period;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
   */
  getDateRange(period) {
    const now = new Date();
    let start;

    switch (period) {
      case 'day':
        start = new Date(now - 24 * 60 * 60 * 1000);
        break;
      case 'week':
        start = new Date(now - 7 * 24 * 60 * 60 * 1000);
        break;
      case 'month':
        start = new Date(now - 30 * 24 * 60 * 60 * 1000);
        break;
      default:
        start = new Date(0);
    }

    return {
      start: start.toISOString(),
      end: now.toISOString()
    };
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
   */
  formatDuration(milliseconds) {
    if (!milliseconds || milliseconds === 0) return '0–º';
    
    const seconds = Math.floor(milliseconds / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);

    if (days > 0) {
      return `${days}–¥ ${hours % 24}—á`;
    } else if (hours > 0) {
      return `${hours}—á ${minutes % 60}–º`;
    } else if (minutes > 0) {
      return `${minutes}–º`;
    } else {
      return `${seconds}—Å`;
    }
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  calculateAverages(reports) {
    if (reports.length === 0) {
      return {
        overallScore: 0,
        productivity: 0,
        quality: 0,
        efficiency: 0,
        reliability: 0
      };
    }

    const sum = reports.reduce((acc, r) => ({
      overallScore: acc.overallScore + r.kpi.overallScore,
      productivity: acc.productivity + r.kpi.productivity,
      quality: acc.quality + r.kpi.quality,
      efficiency: acc.efficiency + r.kpi.efficiency,
      reliability: acc.reliability + r.kpi.reliability
    }), { overallScore: 0, productivity: 0, quality: 0, efficiency: 0, reliability: 0 });

    return {
      overallScore: Math.round(sum.overallScore / reports.length),
      productivity: Math.round(sum.productivity / reports.length),
      quality: Math.round(sum.quality / reports.length),
      efficiency: Math.round(sum.efficiency / reports.length),
      reliability: Math.round(sum.reliability / reports.length)
    };
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
   */
  exportReportToText(report) {
    let text = `=== –û–¢–ß–ï–¢ ${report.periodName.toUpperCase()} ===\n\n`;
    text += `–û–ø–µ—Ä–∞—Ç–æ—Ä: ${report.user.displayName} (${report.user.username})\n`;
    text += `–ü–µ—Ä–∏–æ–¥: ${new Date(report.dateRange.start).toLocaleString('ru-RU')} - ${new Date(report.dateRange.end).toLocaleString('ru-RU')}\n`;
    text += `–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date(report.generatedAt).toLocaleString('ru-RU')}\n\n`;

    text += `--- KPI ---\n`;
    text += `–û–±—â–∏–π –±–∞–ª–ª: ${report.kpi.overallScore}/100 ${report.summary.performance.emoji}\n`;
    text += `–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${report.kpi.productivity}/100\n`;
    text += `–ö–∞—á–µ—Å—Ç–≤–æ: ${report.kpi.quality}/100\n`;
    text += `–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${report.kpi.efficiency}/100\n`;
    text += `–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å: ${report.kpi.reliability}/100\n\n`;

    text += `--- –°–≤–æ–¥–∫–∞ ---\n`;
    text += `–í—Å–µ–≥–æ —Å–º–µ–Ω: ${report.summary.totalShifts}\n`;
    text += `–û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${report.summary.totalWorkTime}\n`;
    text += `–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã: ${report.summary.averageShiftDuration}\n`;
    text += `–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${report.summary.completionRate}%\n`;
    text += `–û—Ü–µ–Ω–∫–∞: ${report.summary.performance.level}\n\n`;

    return text;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   */
  saveReport(report, type = 'detailed') {
    const savedReports = this.store.get('saved_reports', []);
    
    const savedReport = {
      id: 'report_' + Date.now(),
      type,
      userId: report.user.id,
      period: report.period,
      generatedAt: report.generatedAt,
      data: report
    };

    savedReports.push(savedReport);

    // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –æ—Ç—á–µ—Ç–æ–≤
    if (savedReports.length > 100) {
      savedReports.splice(0, savedReports.length - 100);
    }

    this.store.set('saved_reports', savedReports);
    return savedReport;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
   */
  getSavedReports(userId = null, limit = 20) {
    let reports = this.store.get('saved_reports', []);

    if (userId) {
      reports = reports.filter(r => r.userId === userId);
    }

    reports.sort((a, b) => new Date(b.generatedAt) - new Date(a.generatedAt));

    return reports.slice(0, limit);
  }
}

module.exports = ReportsManager;

